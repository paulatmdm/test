"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var iterator_1 = require("rxjs/symbol/iterator");
var utils_1 = require("../utils");
/**
 * @hidden
 */
var SelectionService = (function () {
    function SelectionService() {
        this.changes = new core_1.EventEmitter();
        this.lastSelectionStartIndex = 0;
        this.currentSelection = [];
    }
    SelectionService.prototype.init = function (settings) {
        this.settings = settings;
        this.currentSelection = [];
        if (settings.selectable && settings.selectable.enabled !== false) {
            var iterator = this.getIterator();
            while (true) {
                var item = iterator.next();
                if (item.done) {
                    break;
                }
                if (item.value && item.value.type === "data") {
                    var rowArgs = {
                        dataItem: item.value.data,
                        index: item.value.index
                    };
                    if (settings.rowSelected(rowArgs)) {
                        this.currentSelection[item.value.index] = rowArgs;
                    }
                }
            }
        }
    };
    SelectionService.prototype.isSelected = function (index) {
        return utils_1.isPresent(this.currentSelection[index]);
    };
    SelectionService.prototype.handle = function (item, event) {
        var ev;
        if (this.options.mode === "single" && (event.ctrlKey || event.metaKey) && this.isSelected(item.index)) {
            ev = this.toggle(item);
        }
        else if (this.options.mode === "multiple") {
            if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {
                ev = this.toggle(item);
            }
            else if (event.shiftKey) {
                ev = this.addAllTo(item);
            }
        }
        if (!utils_1.isPresent(ev)) {
            ev = this.select(item);
            this.currentSelection[item.index] = item.data;
        }
        if (!ev.selectedRows.length && !ev.deselectedRows.length) {
            return;
        }
        ev.ctrlKey = event.ctrlKey || event.metaKey;
        //Setting the deprecated `index` and `selected` properties
        if (ev.selectedRows.length >= ev.deselectedRows.length) {
            ev.selected = true;
            ev.index = ev.selectedRows[ev.selectedRows.length - 1].index;
        }
        else {
            ev.selected = false;
            ev.index = ev.deselectedRows[ev.deselectedRows.length - 1].index;
        }
        this.changes.emit(ev);
    };
    SelectionService.prototype.toggle = function (item) {
        var selectedRows = [];
        var deselectedRows = [];
        this.lastSelectionStartIndex = item.index;
        if (this.isSelected(item.index)) {
            deselectedRows.push({ dataItem: item.data, index: item.index });
        }
        else {
            selectedRows.push({ dataItem: item.data, index: item.index });
        }
        return {
            deselectedRows: deselectedRows,
            selectedRows: selectedRows
        };
    };
    SelectionService.prototype.toggleByIndex = function (index) {
        var iterator = this.getIterator();
        while (true) {
            var item = iterator.next();
            if (item.done) {
                break;
            }
            if (item.value && item.value.type === "data" && item.value.index === index) {
                var itemToToggle = {
                    data: item.value.data,
                    index: item.value.index
                };
                if (this.isSelected(index) || this.options.mode === "multiple") {
                    return this.toggle(itemToToggle);
                }
                else {
                    return this.select(itemToToggle);
                }
            }
        }
    };
    SelectionService.prototype.select = function (item) {
        var deselectedRows = [];
        var selectedRows = [];
        this.lastSelectionStartIndex = item.index;
        if (!this.isSelected(item.index)) {
            selectedRows.push({ dataItem: item.data, index: item.index });
        }
        this.currentSelection.forEach(function (row) {
            if (row.index !== item.index) {
                deselectedRows.push(row);
            }
        });
        return {
            deselectedRows: deselectedRows,
            selectedRows: selectedRows
        };
    };
    SelectionService.prototype.addAllTo = function (item) {
        var selectedRows = [];
        var deselectedRows = [];
        var start = Math.min(this.lastSelectionStartIndex, item.index);
        var end = Math.max(this.lastSelectionStartIndex, item.index);
        var iterator = this.getIterator();
        while (true) {
            var next = iterator.next();
            if (next.done) {
                break;
            }
            if (next.value && next.value.type === "data") {
                var idx = next.value.index;
                if ((idx < start || idx > end) && this.isSelected(idx)) {
                    deselectedRows.push({ dataItem: next.value.data, index: idx });
                }
                if ((idx >= start && idx <= end) && !this.isSelected(idx)) {
                    selectedRows.push({ dataItem: next.value.data, index: idx });
                }
            }
        }
        return {
            deselectedRows: deselectedRows,
            selectedRows: selectedRows
        };
    };
    Object.defineProperty(SelectionService.prototype, "selected", {
        get: function () {
            return this.currentSelection.map(function (item) {
                return item.index;
            }).filter(function (n) { return typeof n === "number"; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectionService.prototype, "options", {
        get: function () {
            var defaultOptions = {
                checkboxOnly: false,
                enabled: true,
                mode: "multiple"
            };
            if (!utils_1.isPresent(this.settings)) {
                return defaultOptions;
            }
            if (typeof this.settings.selectable === 'boolean') {
                return {
                    checkboxOnly: false,
                    enabled: this.settings.selectable,
                    mode: "multiple"
                };
            }
            else {
                return Object.assign(defaultOptions, this.settings.selectable);
            }
        },
        enumerable: true,
        configurable: true
    });
    SelectionService.prototype.getIterator = function () {
        var accessor = this.settings.view.accessor();
        if (!accessor) {
            return;
        }
        return accessor[iterator_1.$$iterator]();
    };
    return SelectionService;
}());
SelectionService.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
SelectionService.ctorParameters = function () { return []; };
exports.SelectionService = SelectionService;
